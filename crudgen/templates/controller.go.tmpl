package {{.LowerName}}

import (
	"context"
	"time"

	"google.golang.org/grpc"

	"{{.Package}}/{{.OutDir}}/{{.LowerName}}/dto"
	{{range .Fields}}{{if eq .Association "hasOne" }}{{if .Populate}}"{{.Package}}"{{end}}{{end}}
	{{end}}  pb "{{.PbPackageName}}"
)

type {{.CapitalizedName}}Controller struct {
	pb.Unimplemented{{.CapitalizedName}}ServiceServer
	{{.Name}}Service *{{.CapitalizedName}}Service
}

func New{{.CapitalizedName}}Controller({{.Name}}Service *{{.CapitalizedName}}Service) *{{.CapitalizedName}}Controller {
	return &{{.CapitalizedName}}Controller{
	    {{.Name}}Service: {{.Name}}Service,
	}
}

func register{{.CapitalizedName}}GrpcServer(lc *{{.CapitalizedName}}Controller, s *grpc.Server) {
	pb.Register{{.CapitalizedName}}ServiceServer(s, lc)
}

func (c *{{.CapitalizedName}}Controller) Create(ctx context.Context, create{{.CapitalizedName}}Input *pb.Create{{.CapitalizedName}}Input) (*pb.{{.CapitalizedName}}, error) {
{{range .Fields}}{{if eq .Association "hasOne"}}    {{.Name}}ID := uint(create{{$.CapitalizedName}}Input.{{.CapitalizedName}}Id)
{{end}}{{end}}    create{{.CapitalizedName}}InputDto := dto.Create{{.CapitalizedName}}Input{
{{range .Fields}}{{if not .Association}}        {{.CapitalizedName}}: {{if not .Optional}}&{{ end }}create{{$.CapitalizedName}}Input.{{.CapitalizedName}},
{{else if eq .Association "hasOne"}}        {{.CapitalizedName}}ID: &{{.Name}}ID,
{{end}}{{end}}    }
	{{.Name}}, err := c.{{.Name}}Service.Create(ctx, create{{.CapitalizedName}}InputDto)
	if err != nil {
		return nil, err
	}
	populated{{.CapitalizedName}}, err := c.{{.Name}}Service.GetOneById(ctx, {{.Name}}.ID)
	if err != nil {
		return nil, err
	} 
	return To{{.CapitalizedName}}Pb(populated{{.CapitalizedName}}), nil
}

func (c *{{.CapitalizedName}}Controller) GetAll(ctx context.Context, options *pb.{{.CapitalizedName}}WhereOptions) (*pb.Repeated{{.CapitalizedName}}, error) {
	getOptions := dto.WhereOptions{
{{range .Fields}}{{if not .Association}}    {{.CapitalizedName}}: options.{{.CapitalizedName}},
{{end}}{{end}}}
	if options.Id != nil {
		id := uint(*options.Id)
		getOptions.ID = &id
	}
	{{range .Fields}}{{if eq .Association "hasOne"}}if options.{{.CapitalizedName}}Id != nil {
		id := uint(*options.{{.CapitalizedName}}Id)
		getOptions.{{.CapitalizedName}}ID = &id
	}
{{end}}{{end}} {{.PluralName}}, err := c.{{.Name}}Service.GetAll(ctx, getOptions.ToEntity())
	if err != nil {
		return nil, err
	}
	return ToRepeated{{.CapitalizedName}}Pb({{.PluralName}}), nil
}

func (c *{{.CapitalizedName}}Controller) GetOne(ctx context.Context, options *pb.{{.CapitalizedName}}WhereOptions) (*pb.Optional{{.CapitalizedName}}, error) {
	getOptions := dto.WhereOptions{
{{range .Fields}}{{if not .Association}}    {{.CapitalizedName}}: options.{{.CapitalizedName}},
{{end}}{{end}}}
	if options.Id != nil {
		id := uint(*options.Id)
		getOptions.ID = &id
	}
	{{range .Fields}}{{if eq .Association "hasOne"}}if options.{{.CapitalizedName}}Id != nil {
		id := uint(*options.{{.CapitalizedName}}Id)
		getOptions.{{.CapitalizedName}}ID = &id
	}
{{end}}{{end}} {{.Name}}, err := c.{{.Name}}Service.GetOne(ctx, getOptions.ToEntity())
	if err != nil {
		return nil, err
	}
	return ToOptional{{.CapitalizedName}}Pb({{.Name}}), nil
}

func (c *{{.CapitalizedName}}Controller) GetOneById(ctx context.Context, id *pb.{{.CapitalizedName}}ID) (*pb.Optional{{.CapitalizedName}}, error) {
	{{.Name}}, err := c.{{.Name}}Service.GetOneById(ctx, uint(id.Id))
	if err != nil {
		return nil, err
	}
	return ToOptional{{.CapitalizedName}}Pb({{.Name}}), nil
}

func (c *{{.CapitalizedName}}Controller) UpdateById(ctx context.Context, update{{.CapitalizedName}}ByIdInput *pb.Update{{.CapitalizedName}}ByIdInput) (*pb.Optional{{.CapitalizedName}}, error) {
		update{{.CapitalizedName}}ByIdInputDto := dto.Update{{.CapitalizedName}}Input{
		ID:      uint(update{{.CapitalizedName}}ByIdInput.Id),
{{range .Fields}}{{if not .Association}}        {{.CapitalizedName}}: update{{$.CapitalizedName}}ByIdInput.{{.CapitalizedName}},
{{end}}{{end}}    }
{{range .Fields}}{{if eq .Association "hasOne"}}    if update{{$.CapitalizedName}}ByIdInput.{{.CapitalizedName}}Id != nil {
        {{.Name}}ID := uint(*update{{$.CapitalizedName}}ByIdInput.{{.CapitalizedName}}Id)
        update{{$.CapitalizedName}}ByIdInputDto.{{.CapitalizedName}}ID = &{{.Name}}ID
}
{{end}}{{end}}    {{.Name}}, err := c.{{.Name}}Service.UpdateById(ctx, &update{{.CapitalizedName}}ByIdInputDto)
	if err != nil {
		return nil, err
	}
	return ToOptional{{.CapitalizedName}}Pb({{.Name}}), nil
}

func (c *{{.CapitalizedName}}Controller) Update(ctx context.Context, update{{.CapitalizedName}}Input *pb.Update{{.CapitalizedName}}Input) (*pb.Optional{{.CapitalizedName}}, error) {
		options := update{{.CapitalizedName}}Input.Options
		payload := update{{.CapitalizedName}}Input.Payload
		updateOptions := dto.WhereOptions{
{{range .Fields}}{{if not .Association}}    {{.CapitalizedName}}: options.{{.CapitalizedName}},
{{end}}{{end}}}
		if options.Id != nil {
			id := uint(*options.Id)
			updateOptions.ID = &id
		}
		{{range .Fields}}{{if eq .Association "hasOne"}}if options.{{.CapitalizedName}}Id != nil {
		id := uint(*options.{{.CapitalizedName}}Id)
		updateOptions.{{.CapitalizedName}}ID = &id
	}
{{end}}{{end}}		update{{.CapitalizedName}}InputDto := dto.Update{{.CapitalizedName}}Input{
{{range .Fields}}{{if not .Association}}        {{.CapitalizedName}}: payload.{{.CapitalizedName}},
{{end}}{{end}}    }
{{range .Fields}}{{if eq .Association "hasOne"}}    if payload.{{.CapitalizedName}}Id != nil {
        {{.Name}}ID := uint(*payload.{{.CapitalizedName}}Id)
        update{{$.CapitalizedName}}InputDto.{{.CapitalizedName}}ID = &{{.Name}}ID
}
{{end}}{{end}}    {{.Name}}, err := c.{{.Name}}Service.Update(ctx, &update{{.CapitalizedName}}InputDto, updateOptions.ToEntity())
	if err != nil {
		return nil, err
	}
	return ToOptional{{.CapitalizedName}}Pb({{.Name}}), nil
}

func (c *{{.CapitalizedName}}Controller) RemoveById(ctx context.Context, id *pb.{{.CapitalizedName}}ID) (*pb.Optional{{.CapitalizedName}}, error) {
	{{.Name}}, err := c.{{.Name}}Service.RemoveById(ctx, uint(id.Id))
	if err != nil {
		return nil, err
	}
	return ToOptional{{.CapitalizedName}}Pb({{.Name}}), nil
}

func (c *{{.CapitalizedName}}Controller) Remove(ctx context.Context, options *pb.{{.CapitalizedName}}WhereOptions) (*pb.Optional{{.CapitalizedName}}, error) {
	deleteOptions := dto.WhereOptions{
{{range .Fields}}{{if not .Association}}    {{.CapitalizedName}}: options.{{.CapitalizedName}},
{{end}}{{end}}}
	if options.Id != nil {
		id := uint(*options.Id)
		deleteOptions.ID = &id
	}
	{{range .Fields}}{{if eq .Association "hasOne"}}if options.{{.CapitalizedName}}Id != nil {
		id := uint(*options.{{.CapitalizedName}}Id)
		deleteOptions.{{.CapitalizedName}}ID = &id
	}
{{end}}{{end}}	{{.Name}}, err := c.{{.Name}}Service.Remove(ctx, deleteOptions.ToEntity())
	if err != nil {
		return nil, err
	}
	return ToOptional{{.CapitalizedName}}Pb({{.Name}}), nil
}


func ToCreate{{.CapitalizedName}}InputPb(create{{.CapitalizedName}}Input *dto.Create{{.CapitalizedName}}Input) *pb.Create{{.CapitalizedName}}Input {
	{{range .Fields}}{{if eq .Association "hasOne"}}    {{.Name}}ID := int32(*create{{$.CapitalizedName}}Input.{{.CapitalizedName}}ID)
	{{end}}{{end}}		return &pb.Create{{.CapitalizedName}}Input{
		{{range .Fields}}{{if not .Association}}        {{.CapitalizedName}}: {{if not .Optional}}*{{end}}create{{$.CapitalizedName}}Input.{{.CapitalizedName}},
		{{else if eq .Association "hasOne"}}        {{.CapitalizedName}}Id: {{.Name}}ID,
		{{end}}{{end}} 
	}
}


func ToUpdate{{.CapitalizedName}}ByIdInputPb(update{{.CapitalizedName}}Input *dto.Update{{.CapitalizedName}}Input) *pb.Update{{.CapitalizedName}}ByIdInput {
	payload := &pb.Update{{.CapitalizedName}}ByIdInput{
		Id: int32(update{{.CapitalizedName}}Input.ID),
		{{range .Fields}}{{if not .Association}}        {{.CapitalizedName}}: update{{$.CapitalizedName}}Input.{{.CapitalizedName}},
		{{end}}{{end}} 
	}
	{{range .Fields}}{{if eq .Association "hasOne"}}    if update{{$.CapitalizedName}}Input.{{.CapitalizedName}}ID != nil {
		id := int32(*update{{$.CapitalizedName}}Input.{{.CapitalizedName}}ID)
		payload.{{.CapitalizedName}}Id = &id
	}
	{{end}}{{end}} return payload
}

func ToUpdate{{.CapitalizedName}}PayloadPb(update{{.CapitalizedName}}Input *dto.Update{{.CapitalizedName}}Input) *pb.Update{{.CapitalizedName}}Input_Payload {
	payload := &pb.Update{{.CapitalizedName}}Input_Payload {
	{{range .Fields}}{{if not .Association}}        {{.CapitalizedName}}: update{{$.CapitalizedName}}Input.{{.CapitalizedName}},
		{{end}}{{end}}
	}
	{{range .Fields}}{{if eq .Association "hasOne"}}    if update{{$.CapitalizedName}}Input.{{.CapitalizedName}}ID != nil {
		id := int32(*update{{$.CapitalizedName}}Input.{{.CapitalizedName}}ID)
		payload.{{.CapitalizedName}}Id = &id
	}
	{{end}}{{end}} return payload
}


func To{{.CapitalizedName}}Pb({{.Name}} *dto.{{.CapitalizedName}}) *pb.{{.CapitalizedName}} {
	pb{{.CapitalizedName}} := pb.{{.CapitalizedName}}{
		Id:        int32({{.Name}}.ID),
{{range .Fields}}{{if not .Association}}        {{.CapitalizedName}}: {{if not .Optional}}*{{end}}{{$.Name}}.{{.CapitalizedName}},
{{else if eq .Association "hasOne"}}        {{if not .Populate}}{{.CapitalizedName}}Id: int32(*{{$.Name}}.{{.CapitalizedName}}ID),
{{end}}{{end}}{{end}}        CreatedAt: {{.Name}}.CreatedAt.Format(time.RFC3339),
		UpdatedAt: {{.Name}}.UpdatedAt.Format(time.RFC3339),
	}
{{range .Fields}}{{if eq .Association "hasOne"}}{{if .Populate}}if {{$.Name}}.{{.CapitalizedName}} != nil {
	pb{{$.CapitalizedName}}.{{.CapitalizedName}} = {{.LowerName}}.To{{.CapitalizedName}}Pb({{$.Name}}.{{.CapitalizedName}})
}{{end}}{{end}}{{end}}
	if {{.Name}}.DeletedAt != nil {
		deletedAt := {{.Name}}.DeletedAt.Format(time.RFC3339)
		pb{{.CapitalizedName}}.DeletedAt = &deletedAt
	}
	return &pb{{.CapitalizedName}}
}

func ToOptional{{.CapitalizedName}}Pb({{.Name}} *dto.{{.CapitalizedName}}) *pb.Optional{{.CapitalizedName}} {
	if {{.Name}} == nil {
		return &pb.Optional{{.CapitalizedName}}{}
	}
	return &pb.Optional{{.CapitalizedName}}{
		{{.CapitalizedName}}: To{{.CapitalizedName}}Pb({{.Name}}),
	}
}

func ToRepeated{{.CapitalizedName}}Pb({{.PluralName}} []*dto.{{.CapitalizedName}}) *pb.Repeated{{.CapitalizedName}} {
	pb{{.CapitalizedPluralName}} := make([]*pb.{{.CapitalizedName}}, len({{.PluralName}}))
	for i, {{.Name}} := range {{.PluralName}} {
		pb{{.CapitalizedPluralName}}[i] = To{{.CapitalizedName}}Pb({{.Name}})
	}
	return &pb.Repeated{{.CapitalizedName}}{
		{{.CapitalizedPluralName}}: pb{{.CapitalizedPluralName}},
	}
}

func ToWhereOptionsPb(options *dto.WhereOptions) *pb.{{.CapitalizedName}}WhereOptions {
	payload := &pb.{{.CapitalizedName}}WhereOptions{
{{range .Fields}}{{if not .Association}}    {{.CapitalizedName}}: options.{{.CapitalizedName}},
{{end}}{{end}}} {{range .Fields}}{{if eq .Association "hasOne"}}    
	if options.{{.CapitalizedName}}ID != nil {
		id := int32(*options.{{.CapitalizedName}}ID)
		payload.{{.CapitalizedName}}Id = &id
	} {{end}}{{end}}
	return payload
}