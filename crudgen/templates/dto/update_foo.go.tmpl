package dto

import (
	pb "{{.Package}}/{{.OutDir}}/{{.LowerName}}/grpc"
	"{{.Package}}/{{.OutDir}}/{{.LowerName}}/entities"
	"gorm.io/gorm"
)

type Update{{.CapitalizedName}}Input struct {
	ID      uint    `json:"id" validate:"required" example:"1"`
{{range .Fields}}{{if not .Association}}    {{.CapitalizedName}} {{if not .Array}}*{{end}}{{.Type}} `json:"{{.SnakeName}}"`
{{else if eq .Association "hasOne"}}    {{.CapitalizedName}}ID *uint `json:"{{.SnakeName}}_id"`
{{end}}{{end}}}

func (u *Update{{.CapitalizedName}}Input) ToEntity() *entities.{{.CapitalizedName}} {
	return &entities.{{.CapitalizedName}}{
		Model: gorm.Model{
			ID: u.ID,
		},
{{range .Fields}}{{if not .Association}}        {{.CapitalizedName}}: u.{{.CapitalizedName}},
{{else if eq .Association "hasOne"}}        {{.CapitalizedName}}ID: u.{{.CapitalizedName}}ID,
{{end}}{{end}}    }
}

func (u *Update{{.CapitalizedName}}Input) ToPb() *pb.Update{{.CapitalizedName}}Input {
	{{range .Fields}}{{if eq .Association "hasOne"}}    {{.Name}}ID := int32(*u.{{.CapitalizedName}}ID)
	{{end}}{{end}}		return &pb.Update{{.CapitalizedName}}Input{
		{{range .Fields}}{{if not .Association}}        {{.CapitalizedName}}: u.{{.CapitalizedName}},
		{{else if eq .Association "hasOne"}}        {{.CapitalizedName}}Id: &{{.Name}}ID,
		{{end}}{{end}} 
	}
}
