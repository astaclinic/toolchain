package {{.LowerName}}

import (
	"context"
	"errors"

	"{{.Package}}/{{.OutDir}}/{{.LowerName}}/dto"
	"{{.Package}}/{{.OutDir}}/{{.LowerName}}/entities"
	pb "{{.PbPackageName}}"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

type {{.CapitalizedName}}ClientService struct {
	{{.Name}}Client pb.{{.CapitalizedName}}ServiceClient
}

func New{{.CapitalizedName}}ClientService({{.Name}}Client pb.{{.CapitalizedName}}ServiceClient) *{{.CapitalizedName}}ClientService {
	return &{{.CapitalizedName}}ClientService{
		{{.Name}}Client: {{.Name}}Client,
	}
}

func (s *{{.CapitalizedName}}ClientService) Create(ctx context.Context, create{{.CapitalizedName}}Input *dto.Create{{.CapitalizedName}}Input) (*dto.{{.CapitalizedName}}, error) {
	{{.Name}} := ToCreate{{.CapitalizedName}}InputPb(create{{.CapitalizedName}}Input)
	res, err := s.{{.Name}}Client.Create(ctx, {{.Name}})
	if err != nil {
		return nil, err
	}
	output, err := dto.{{.CapitalizedName}}PbToDto(res)
	if err != nil {
		return nil, err
	}
	return output, nil
}

func (s *{{.CapitalizedName}}ClientService) GetAll(ctx context.Context, options *dto.WhereOptions) ([]*dto.{{.CapitalizedName}}, error) {
	res, err := s.{{.Name}}Client.GetAll(ctx, ToWhereOptionsPb(options))
	if err != nil {
		return nil, err
	}
	output := make([]*dto.{{.CapitalizedName}}, len(res.{{.CapitalizedPluralName}}))
	for i, {{.Name}} := range res.{{.CapitalizedPluralName}} {
		dto, err := dto.{{.CapitalizedName}}PbToDto({{.Name}})
		if err != nil {
			return nil, err
		}
		output[i] = dto
	}
	return output, nil
}

func (s *{{.CapitalizedName}}ClientService) GetOneById(ctx context.Context, id uint) (*dto.{{.CapitalizedName}}, error) {
	res, err := s.{{.Name}}Client.GetOneById(ctx, &pb.{{.CapitalizedName}}ID{
		Id: int32(id),
	})
	if err != nil {
		return nil, err
	}
	output, err := dto.Optional{{.CapitalizedName}}PbToDto(res)
	if err != nil {
		return nil, err
	}
	return output, nil
}

func (s *{{.CapitalizedName}}ClientService) GetOne(ctx context.Context, options *dto.WhereOptions) (*dto.{{.CapitalizedName}}, error) {
	res, err := s.{{.Name}}Client.GetOne(ctx, ToWhereOptionsPb(options))
	if err != nil {
		return nil, err
	}
	output, err := dto.Optional{{.CapitalizedName}}PbToDto(res)
	if err != nil {
		return nil, err
	}
	return output, nil
}

func (s *{{.CapitalizedName}}ClientService) UpdateById(ctx context.Context, update{{.CapitalizedName}}Input *dto.Update{{.CapitalizedName}}Input) (*dto.{{.CapitalizedName}}, error) {
	{{.Name}} := ToUpdate{{.CapitalizedName}}ByIdInputPb(update{{.CapitalizedName}}Input)
	res, err := s.{{.Name}}Client.UpdateById(ctx, {{.Name}})
	if err != nil {
		return nil, err
	}
	output, err := dto.Optional{{.CapitalizedName}}PbToDto(res)
	if err != nil {
		return nil, err
	}
	return output, nil
}

func (s *{{.CapitalizedName}}ClientService) Update(ctx context.Context, update{{.CapitalizedName}}Input *dto.Update{{.CapitalizedName}}Input, options *dto.WhereOptions) (*dto.{{.CapitalizedName}}, error) {
	{{.Name}} := ToUpdate{{.CapitalizedName}}PayloadPb(update{{.CapitalizedName}}Input)
	res, err := s.{{.Name}}Client.Update(ctx, &pb.Update{{.CapitalizedName}}Input{
		Payload: {{.Name}},
		Options: ToWhereOptionsPb(options),
	})
	if err != nil {
		return nil, err
	}
	output, err := dto.Optional{{.CapitalizedName}}PbToDto(res)
	if err != nil {
		return nil, err
	}
	return output, nil
}

func (s *{{.CapitalizedName}}ClientService) RemoveById(ctx context.Context, id uint) (*dto.{{.CapitalizedName}}, error) {
	res, err := s.{{.Name}}Client.RemoveById(ctx, &pb.{{.CapitalizedName}}ID{
		Id: int32(id),
	})
	if err != nil {
		return nil, err
	}
	output, err := dto.Optional{{.CapitalizedName}}PbToDto(res)
	if err != nil {
		return nil, err
	}
	return output, nil
}

func (s *{{.CapitalizedName}}ClientService) Remove(ctx context.Context, options *dto.WhereOptions) (*dto.{{.CapitalizedName}}, error) {
	res, err := s.{{.Name}}Client.Remove(ctx, ToWhereOptionsPb(options))
	if err != nil {
		return nil, err
	}
	output, err := dto.Optional{{.CapitalizedName}}PbToDto(res)
	if err != nil {
		return nil, err
	}
	return output, nil
}


type {{.CapitalizedName}}Service struct {
	db *gorm.DB
}

func New{{.CapitalizedName}}Service(db *gorm.DB) *{{.CapitalizedName}}Service {
	return &{{.CapitalizedName}}Service{db: db}
}

func (s *{{.CapitalizedName}}Service) Create(ctx context.Context, create{{.CapitalizedName}}Input dto.Create{{.CapitalizedName}}Input) (*dto.{{.CapitalizedName}}, error) {
	{{.Name}} := create{{.CapitalizedName}}Input.ToEntity()
	res := s.db.WithContext(ctx).Create({{.Name}})
	if res.Error != nil {
		return nil, res.Error
	}
	return dto.FromEntity({{.Name}}), nil
}

func (s *{{.CapitalizedName}}Service) GetAll(ctx context.Context, options *dto.WhereOptions) ([]*dto.{{.CapitalizedName}}, error) {
	var {{.PluralName}} []*entities.{{.CapitalizedName}}
	res := s.db.WithContext(ctx){{range .Fields}}{{if eq .Association "hasOne"}}.Preload("{{.CapitalizedName}}"){{end}}{{end}}.Where(options.ToEntity()).Find(&{{.PluralName}})
	if res.Error != nil {
		return nil, res.Error
	}
	var {{.PluralName}}Dto = make([]*dto.{{.CapitalizedName}}, len({{.PluralName}}))
	for i, {{.Name}} := range {{.PluralName}} {
		{{.PluralName}}Dto[i] = dto.FromEntity({{.Name}})
	}
	return {{.PluralName}}Dto, nil
}

func (s *{{.CapitalizedName}}Service) GetOneById(ctx context.Context, id uint) (*dto.{{.CapitalizedName}}, error) {
	var {{.Name}} entities.{{.CapitalizedName}}
	res := s.db.WithContext(ctx){{range .Fields}}{{if eq .Association "hasOne"}}.Preload("{{.CapitalizedName}}"){{end}}{{end}}.First(&{{.Name}}, id)
	if res.Error != nil {
		if errors.Is(res.Error, gorm.ErrRecordNotFound) {
			return nil, nil
		}
		return nil, res.Error
	}
	return dto.FromEntity(&{{.Name}}), nil
}

func (s *{{.CapitalizedName}}Service) GetOne(ctx context.Context, options *dto.WhereOptions) (*dto.{{.CapitalizedName}}, error) {
	var {{.Name}} entities.{{.CapitalizedName}}
	res := s.db.WithContext(ctx){{range .Fields}}{{if eq .Association "hasOne"}}.Preload("{{.CapitalizedName}}"){{end}}{{end}}.Where(options.ToEntity()).First(&{{.Name}})
	if res.Error != nil {
		if errors.Is(res.Error, gorm.ErrRecordNotFound) {
			return nil, nil
		}
		return nil, res.Error
	}
	return dto.FromEntity(&{{.Name}}), nil
}


func (s *{{.CapitalizedName}}Service) UpdateById(ctx context.Context, input *dto.Update{{.CapitalizedName}}Input) (*dto.{{.CapitalizedName}}, error) {
	{{.Name}} := input.ToEntity()
	updated{{.CapitalizedName}} := &entities.{{.CapitalizedName}}{Model: gorm.Model{ID: input.ID}}
	res := s.db.WithContext(ctx).Model(&updated{{.CapitalizedName}}).Clauses(clause.Returning{}).Updates({{.Name}})
	if res.Error != nil {
		return nil, res.Error
	}
	if res.RowsAffected == 0 {
		return nil, nil
	}
	return dto.FromEntity(updated{{.CapitalizedName}}), nil
}

func (s *{{.CapitalizedName}}Service) Update(ctx context.Context, input *dto.Update{{.CapitalizedName}}Input, options *dto.WhereOptions) (*dto.{{.CapitalizedName}}, error) {
	{{.Name}} := input.ToEntity()
	updated{{.CapitalizedName}} := &entities.{{.CapitalizedName}}{Model: gorm.Model{ID: input.ID}}
	res := s.db.WithContext(ctx).Model(&updated{{.CapitalizedName}}).Where(options.ToEntity()).Clauses(clause.Returning{}).Updates({{.Name}})
	if res.Error != nil {
		return nil, res.Error
	}
	if res.RowsAffected == 0 {
		return nil, nil
	}
	return dto.FromEntity(updated{{.CapitalizedName}}), nil
}

func (s *{{.CapitalizedName}}Service) RemoveById(ctx context.Context, id uint) (*dto.{{.CapitalizedName}}, error) {
	var {{.Name}} entities.{{.CapitalizedName}}
	res := s.db.WithContext(ctx).Clauses(clause.Returning{}).Delete(&{{.Name}}, id)
	if res.Error != nil {
		return nil, res.Error
	}
	if res.RowsAffected == 0 {
		return nil, nil
	}
	return dto.FromEntity(&{{.Name}}), nil
}

func (s *{{.CapitalizedName}}Service) Remove(ctx context.Context, options *dto.WhereOptions) (*dto.{{.CapitalizedName}}, error) {
	var {{.Name}} entities.{{.CapitalizedName}}
	res := s.db.WithContext(ctx).Where(options.ToEntity()).Clauses(clause.Returning{}).Delete(&{{.Name}})
	if res.Error != nil {
		return nil, res.Error
	}
	if res.RowsAffected == 0 {
		return nil, nil
	}
	return dto.FromEntity(&{{.Name}}), nil
}

